import java.util.ArrayList;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;

public class Eigenfaces {

	private Mat imageMatrix;
	private Mat meanImage;
	private Mat eigenVectors;
	
	public Eigenfaces(ArrayList<Mat> images){
		imageMatrix = calculateImageMatrix(images);
//		meanImage = calculateMeanImage(imageMatrix);
//		subtractMean();
//		calculateEigenvectors();
	}
	
	private Mat calculateImageMatrix(ArrayList<Mat> images){
		if(images.size() == 0)
			throw new IllegalArgumentException("No images...");
		if(images.get(0).type() != CvType.CV_64FC1)
			throw new IllegalArgumentException("Image is not b&w");
		
		int d = (int)images.get(0).total();
		int n = images.size();
		
		Mat ret = new Mat(n, d, CvType.CV_64FC1);
		
		for(int i = 0; i < n; i++){
			if(images.get(i).total() != d)
				throw new IllegalArgumentException("Images are not the same size");
			
			Mat row = ret.row(i);
			images.get(i).reshape(0,1).copyTo(row);
		}
		
		return ret;
	}
	
	private Mat calculateMeanImage(Mat imageMat){
		int rows = imageMat.rows();
		int cols = imageMat.cols();
		Mat ret = Mat.zeros(1, cols, CvType.CV_64FC1);//new Mat(rows, 1, CvType.CV_8UC1);
		
		for(int i = 0; i < rows; i++){			
			Core.add(ret, imageMat.row(i), ret);
		}
		
		Core.multiply(ret, new Scalar(1.0/rows),ret);
		
		return ret;
	}
	
	private void subtractMean(){
		Mat ret = imageMatrix.clone();
				
		for(int i = 0; i < ret.cols(); i++){
			Core.subtract(ret.col(i), meanImage, ret.col(i));
		}
		
		imageMatrix = ret;
	}
	
	private void calculateEigenvectors(){
		eigenVectors = new Mat(imageMatrix.rows(), imageMatrix.cols(), CvType.CV_64FC1);
		Mat mean = new Mat();
		Core.PCACompute(imageMatrix, mean, eigenVectors);
		System.err.println(mean.dump());
		System.err.println(meanImage.dump());
	}
	
	public String toString(){
		return imageMatrix.dump();
	}
	
}
